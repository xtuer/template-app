plugins {
    id 'java'
    id 'org.springframework.boot' version '2.3.0.RELEASE'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    id 'org.hidetake.ssh' version '2.9.0'
}

group   = 'com.xtuer'
version = '0.0.1-SNAPSHOT'

repositories {
    mavenCentral()
}

ext.versions = [
        lombok     : '1.18.10',
        commonsIO  : '2.6',
        commonsLang: '3.8',
        commonsText: '1.7',
        fastjson   : '1.2.70',
        mybatis    : '2.1.1',
        mysql      : '5.1.46',
        jetcache   : '2.5.14',
        redis      : '2.9.0',
        jsoup      : '1.12.1',
        uid        : '1.0.2.RELEASE',
]

dependencies {
    implementation (
            'org.springframework.boot:spring-boot-starter-web',
            'org.springframework.boot:spring-boot-starter-security',
            'org.springframework.boot:spring-boot-starter-thymeleaf',
            'org.springframework.boot:spring-boot-starter-validation',
            'javax.validation:validation-api:2.0.1.Final',

            "commons-io:commons-io:${versions.commonsIO}",
            "org.apache.commons:commons-lang3:${versions.commonsLang}",
            "org.apache.commons:commons-text:${versions.commonsText}",
            "com.alibaba:fastjson:${versions.fastjson}",
            "org.mybatis.spring.boot:mybatis-spring-boot-starter:${versions.mybatis}",
            "com.alicp.jetcache:jetcache-starter-redis:${versions.jetcache}",
            "redis.clients:jedis:${versions.redis}",
            "org.jsoup:jsoup:${versions.jsoup}",
            "com.github.wujun234:uid-generator-spring-boot-starter:${versions.uid}"
    )

    runtimeOnly("mysql:mysql-connector-java:${versions.mysql}")

    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }

    // Lombok
    compileOnly "org.projectlombok:lombok:${versions.lombok}"
    annotationProcessor "org.projectlombok:lombok:${versions.lombok}"
}

test {
    useJUnitPlatform()
}

bootJar {
    archiveFileName = 'xtuer.jar'
}

ext {
    // 运行: gradle bootRun --args='--spring.profiles.active=mac'
    // 部署: gradle clean deploy -Denv=production
    environment = System.getProperty("env", "dev") // 获取 gradle 参数中 env 的值，选择环境
    config      = new ConfigSlurper(environment).parse(file('config.groovy').toURI().toURL()).toProperties()
}

////////////////////////////////////////////////////////////////////////////////
//                                   项目部署                                  //
////////////////////////////////////////////////////////////////////////////////
remotes {
    server {
        host     = config.getProperty('deploy.host')
        user     = config.getProperty('deploy.username')
        password = config.getProperty('deploy.password')
    }
}

ssh.settings {
    knownHosts = allowAnyHosts
}

task deploy(dependsOn: bootJar) {
    def jar  = bootJar.archiveFileName.get()
    def dir  = config.getProperty('deploy.dir')
    def path = "${dir}/${jar}"
    def port = config.getProperty('deploy.port')

    doLast {
        ssh.run {
            session(remotes.server) {
                put from: "${buildDir}/libs/${jar}", into: "${path}.bak"
                execute """
                    source /root/.bash_profile;
                    kill `ps aux | grep -i ${jar} | grep -v grep | awk '{print \$2}'`;
                    mv -f ${path}.bak ${path};
                    nohup java -Dfile.encoding=UTF-8 -jar ${path} --server.port=${port} > /dev/null 2>&1 &
                """
            }
        }
    }
}

////////////////////////////////////////////////////////////////////////////////
//                                    JVM                                     //
////////////////////////////////////////////////////////////////////////////////
sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8
[compileJava, compileTestJava, javadoc]*.options*.encoding = 'UTF-8'

compileJava {
    options.compilerArgs << '-Xlint:unchecked' << '-Xlint:deprecation' << '-parameters'
    options.forkOptions.jvmArgs << '-parameters'
}

// 如果设置了 JRebel，则使用 JRebel 进行热更新
if (project.hasProperty('rebelAgent')) {
    bootRun.jvmArgs += rebelAgent
}
